---
- name: "Make sure temp folder exists"
  file:
    path: "{{ import_db_tmp_path }}"
    state: "directory"

- name: "Download the copy of the DB snapshot from the storage provider"
  include: "download-from/{{ import_db_storage_provider }}.yml"

# Note: Ansible does not support plain .gz files as part of its "unarchive" module, as they are not strictly speaking
# archives. See
#   - https://github.com/ansible/ansible-modules-extras/pull/1301
#   - https://github.com/ansible/ansible-modules-core/issues/1035
- name: "Unpack the DB"
  command: "gzip -d {{ import_db_tmp_path }}/db_dump.sql.gz"
  args:
    creates: "{{ import_db_tmp_path }}/db_dump.sql"
  when: "import_db_downloaded_archive.changed"

- name: "Delete the old database"
  mysql_db:
    name: "{{ import_db_database_name }}"
    state: "absent"
    login_password: "{{ import_db_root_password }}"
    login_user: "root"
  when: "import_db_downloaded_archive.changed"

- name: "Restore the database asynchronously"
  mysql_db:
    name: "{{ import_db_database_name }}"
    state: "import"
    target: "{{ import_db_tmp_path }}/db_dump.sql"
    login_password: "{{ import_db_root_password }}"
    login_user: "root"
  async: import_db_async_timeout
  poll: 0
  notify: "Clean up tmp db files"
  register: import_db_sleeper
  when: import_db_allow_async

- name: "Restore the database synchronously"
  mysql_db:
    name: "{{ import_db_database_name }}"
    state: "import"
    target: "{{ import_db_tmp_path }}/db_dump.sql"
    login_password: "{{ import_db_root_password }}"
    login_user: "root"
  notify: "Clean up tmp db files"
  when: not import_db_allow_async
